##########RCGPANN R###############RCGPANN#############


###########RCGPANN###########################

a=c(2,4,6,8,10)
w=c(2,1,3,0)
for(val in a)
p[i]=a[i]*w[i]
#####################
1:length(vector)
p=matrix(0, 7, 1)
set.seed(720)
p<-c(0,0,0,0,0,0,0)

CPUTS1[1:5]
 0.07933484 0.37572076 0.35209020 0.31374846 0.33300299


CPUTS1
   [1] 0.079334843 0.375720758 0.352090198 0.313748456 0.333002986 0.358757208
   [7] 0.318845243 0.366042010 0.365578666 0.261171746 0.224516063 0.245340815
  [13] 0.198337109 0.452957681 0.336709741 0.320685750 0.250566310 0.326799320
  [19] 0.317957166 0.361807558 0.303567751 0.186045614 0.241029139 0.229252471
  [25] 0.142208093 0.342643122 0.154563942 0.153148167 0.169262253 0.172827430
  [31] 0.127728583 0.238905478 0.211323620 0.090558072 0.140702224 0.118036965

print(CPUW5[4174,1])
    lag5      lag4      lag3      lag2      lag1         y
1  0.07933484 0.3757208 0.3520902 0.3137485 0.3330030 0.3587572
2  0.37572076 0.3520902 0.3137485 0.3330030 0.3587572 0.3188452
3  0.35209020 0.3137485 0.3330030 0.3587572 0.3188452 0.3660420
4  0.31374846 0.3330030 0.3587572 0.3188452 0.3660420 0.3655787
5  0.33300299 0.3587572 0.3188452 0.3660420 0.3655787 0.2611717
6  0.35875721 0.3188452 0.3660420 0.3655787 0.2611717 0.2245161
7  0.31884524 0.3660420 0.3655787 0.2611717 0.2245161 0.2453408
8  0.36604201 0.3655787 0.2611717 0.2245161 0.2453408 0.1983371

lag1=x5
lag2=x4
lag3=x3
lag4=x2
lag5=x1
TCG<-CPUW5[4174:8347,1:5]


length(TCG[1:5,1])
TCG$lag1
set.seed(722)
p1<-as.vector(matrix(0,nrow=4174))
p2<-as.vector(matrix(0,nrow=4174))
p3<-as.vector(matrix(0,nrow=4174))
p4<-as.vector(matrix(0,nrow=4174))
p5<-as.vector(matrix(0,nrow=4174))
p6<-as.vector(matrix(0,nrow=4174))


ys<-as.vector(matrix(0,nrow=4174))

set.seed(12345)
x0 <- as.vector(TCG$lag5)
x1 <- as.vector(TCG$lag4)
x2 <- as.vector(TCG$lag3)
x3 <- as.vector(TCG$lag2)
x4 <- as.vector(TCG$lag1)
ys<-as.vector(matrix(0,nrow=4174))

for (i in 1:length(x1)) {

n5<-sigmoid(x4[i]*0.506582348 +x2[i]*-0.541103631 +x1[i]*0.959851767+x4[i]*0.912161709+x3[i]*0.997902529)
n6<-sigmoid(x4[i]*-0.828627814 +n5*-0.599031165 +n5*0.896761378+x2[i]*0.156051832+x3[i]*-0.025218621)
n7<-sigmoid(x3[i]*-0.999448609+x1[i]*0.975382807+x0[i]*-0.982697096+x1[i]*0.979656103+x0[i]*-0.970994118)
n8<-sigmoid(n7*(-0.539523242)+n6*0.491734746+n5*0.02705971+x4[i]*0.143474725+x4[i]*-0.601916252)
n9<-sigmoid(x0[i]*-0.75989462+n8*0.048235005+x4[i]*-0.097955664+x1[i]*-0.873630507+n5*0.132408839)
n10<-sigmoid(x0[i]*-0.994272874+n8*0.976679028+x3[i]*-0.986520556+x0[i]*-0.985976986+x0[i]*-0.992489562)
n11<-sigmoid(x3[i]*0.433099563+n9*0.848981216+x0[i]*0.348491568+	x1[i]*0.53241466+	n7*-0.371502855)
n12<-sigmoid(n8*-0.652311893+	n8*-0.236627174+n8*-0.525020231+n7*0.056080529+x0[i]*-0.370064069)
n13<-sigmoid(n12*0.660042282+	n10*0.995998154+	x3[i]*0.551665019+x1[i]*-0.677119584+n5*-0.692222669)
n14<-sigmoid(x3[i]*-0.998688241+x3[i]*-0.978921784+n8*0.990034621+x3[i]*-0.966987596+n8*0.998405675)
n15<-sigmoid(n8*-0.847024843+n13*-0.244673164+x0[i]*-0.588255352+x2[i]*0.647021878+x1[i]*0.876332234)
n16<-sigmoid(x4[i]*0.840663869+x0[i]*-0.011851347+n9*-0.184688541+n14*-0.334850961+	n15*0.517705818)
n20<-sigmoid(n15*-0.605733314+n15*-0.998158624+	x3[i]*0.999717273+n11*-0.92657599+n11*-0.98455636)
n21<- sigmoid(n13*0.430962424+n20*-0.998921473+	n9*0.034041672+n13*0.180002296+n16*0.703225416)
o0<-x4[i]
o1<-n5
o2<-n5
o3<-x0[i]
o4<-n5
o5<-n21
#ys[i]<-(o1+o2+o3+o4+o5+o0)/6
#ys[i]<-(n20+n5+n21+x3[i]+x4[i]+x0[i])/6
ys[i]<-(n21+x4[i]+x3[i]+x2[i]+x0[i]+n20)/6            #+x2[i])/2
#print(n5)
#ys[i]<-n21
}
#print(ys)
#plot(ys)
accuracy(CPUW5$y[4174:8347],ys)
##############################33
yz<-(x4[i]+x2[i]+x3[i]+x1[i]+x0[i])/5

accuracy(CPUW5$y[4174:8347],yz)



yfcgp<-yfcgp*100



#####################################################################
#NODES for Simulation

#Number of Hosts =14
#Samples per host= 288 i.e. 12x24= 288 a day CPU pattern


CPUPC<-read.csv("C:\\Users\\Haier\\Documents\\CodeRZia\\CPUPerCloudsim.csv")

plot.ts(CPUPC)
cpuzia<-ts(CPUPC)
CPUPCh<-ts(CPUPC)
h1<-ts(CPUPC[1:288,])
write.csv(h1, file = "h1.csv")

###Predicted Test values

CPUPC<-as.vector(matrix(0,nrow=4174))




########TREND and SEASONAL components
CPUZIAOCT102019<- read.csv("E:\\QaziZIA PRINTths\\Paper for Neurocomputing elsevier\\CPUW.csv")

CPUPz<-CPUZIAOCT102019[1:8352,1]*100
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birthstimeseries <- ts(births, frequency = 12, start = c(1946,1))
birthstimeseriescomponents <- decompose(birthstimeseries)
plot(birthstimeseriescomponents)

CPUPCh<-ts(CPUPz, frequency = 288, start = c(1,1))


CPUtimeseriescomponents <- decompose(CPUPCh)
plot(CPUtimeseriescomponents,xlab="Days")

plot(CPUtimeseriescomponents$seasonal,main="Season of CPU Usage Time Series",xlab="Days", ylab="CPU Usage (%)")

plot(CPUtimeseriescomponents$trend,main="Trend of CPU Usage Time Series",xlab="Days", ylab="CPU Usage (%)")

plot(CPUtimeseriescomponents$random,main="Random Noise of CPU Usage Time Series",xlab="Days", ylab="CPU Usage (%)")


plot(CPUPCh)
main="(a). 20th Day Predictions (Actual Vs Predicted CPU Usage)  ",xlab="Time(5 minutes spanned)"

CCh1<-ts(h1, frequency = 12, start = c(1,1))
Ch1timeseriescomponents <- decompose(CCh1)
plot(Ch1timeseriescomponents)


CPUtimeseriescomponents <- decompose(CPUPCh)
plot(CPUtimeseriescomponents)

##############################################

## CPUPCh is test usage and yrcgpS is Predicted usage
##

plot.ts(CPUPCh, col = "blue", pch=4)
      points(yrcgpS,col = "red", pch=1 )





h1<-CPUPCh[1:288]
h2<-CPUPCh[289:576]
h3<-CPUPCh[577:864]
h4<-CPUPCh[865:1152]
h5<-CPUPCh[1153:1440]
h6<-CPUPCh[1441:1728]
h7<-CPUPCh[1729:2016]
h8<-CPUPCh[2017:2304]
h9<-CPUPCh[2305:2592]
h10<-CPUPCh[2593:2880]
h11<-CPUPCh[2881:3168]
h12<-CPUPCh[3169:3456]
h13<-CPUPCh[3457:3744]
h14<-CPUPCh[3745:4032]
length(h1)


h1fp<-yfcgp[1:288]
h2fp<-yfcgp[289:576]
h3fp<-yfcgp[577:864]
h4fp<-yfcgp[865:1152]
h5fp<-yfcgp[1153:1440]
h6fp<-yfcgp[1441:1728]
h7fp<-yfcgp[1729:2016]
h8fp<-yfcgp[2017:2304]
h9fp<-yfcgp[2305:2592]
h10fp<-yfcgp[2593:2880]
h11fp<-yfcgp[2881:3168]
h12fp<-yfcgp[3169:3456]
h13fp<-yfcgp[3457:3744]
h14fp<-yfcgp[3745:4032]

plot(h1)
  lines(h1fp)
accuracy(h1,h1fp)
accuracy(h2,h2fp)
accuracy(h3,h3fp)
accuracy(h4,h4fp)
accuracy(h5,h5fp)
accuracy(h6,h6fp)
accuracy(h7,h7fp)
accuracy(h8,h8fp)
accuracy(h9,h9fp)
accuracy(h10,h10fp)
accuracy(h11,h11fp)
accuracy(h12,h12fp)
accuracy(h13,h13fp)
accuracy(h14,h14fp)

##########COMPARISON

fitARNN <- nnetar(h1)
predARNN<-forecast(fitARNN, h=288)

accuracy(predARNN, h1)
accuracy(predARNNT,CPUTS1[4177:8352])
 accuracy(predARNNT,CPUTS1[4177:8352])


############CGPANN PLOTS
attach(mtcars)
par(mfrow=c(2,2)) 

#5
plot.ts(ts(h1),pch=19,lwd=1, col="dark grey", main="(a). 16th Day Predictions (Actual Vs Predicted CPU Usage)  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h1fp, pch=18,lwd=1,col="black",lty=3   )
legend(270,90,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)


plot.ts(ts(h2),pch=19,lwd=1, col="dark grey", main="(b). 17th Day Predictions (Actual Vs Predicted CPU Usage)  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h2fp, pch=18,lwd=1,col="black",lty=3   )
legend(270,90,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

plot.ts(ts(h3),pch=19,lwd=1, col="dark grey", main="(c). 18th Day Predictions (Actual Vs Predicted CPU Usage)  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h3fp, pch=18,lwd=1,col="black",lty=3   )
legend(270,90,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

plot.ts(ts(h4),pch=19,lwd=1, col="dark grey", main="(d). 19th Day Predictions (Actual Vs Predicted CPU Usage)  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h4fp, pch=18,lwd=1,col="black",lty=3   )
legend(270,72,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

######################################


attach(mtcars)
par(mfrow=c(2,2)) 

plot.ts(ts(h5),pch=19,lwd=1, col="dark grey", main="(a). 20th Day Predictions (Actual Vs Predicted CPU Usage)  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h5fp, pch=18,lwd=1,col="black",lty=3  )
legend(270,70,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

plot.ts(ts(h6),pch=19,lwd=1, col="dark grey", main="(b). 21st Day Predictions (Actual Vs Predicted CPU Usage)  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h6fp, pch=18,lwd=1,col="black",lty=3   )
legend(270,69,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

plot.ts(ts(h7),pch=19,lwd=1, col="dark grey", main="(c). 22nd Day Predictions (Actual Vs Predicted CPU Usage)  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h7fp, pch=18,lwd=1,col="black",lty=3   )
legend(270,80,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

plot.ts(ts(h8),pch=19,lwd=1, col="dark grey", main="(d). 23rd Day Predictions (Actual Vs Predicted CPU Usage)  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h8fp, pch=18, lwd=1,col="black",lty=3   )
legend(270,70,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)


################################ h0st9to 12

attach(mtcars)
par(mfrow=c(2,2)) 


plot.ts(ts(h9),pch=19,lwd=1, col="dark grey", main="(a). 24th Day Predictions (Actual Vs Predicted CPU Usage)  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h9fp, pch=18,lwd=1,col="black",lty=3   )
legend(270,70,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

plot.ts(ts(h10),pch=19,lwd=1, col="dark grey", main="(b). 25th Day Predictions (Actual Vs Predicted CPU Usage)  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h10fp, pch=18,lwd=1,col="black",lty=3   )
legend(270,80,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

plot.ts(ts(h11),pch=19,lwd=1, col="dark grey", main="(c). 26th Day Predictions (Actual Vs Predicted CPU Usage)  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h11fp, pch=18,lwd=1,col="black",lty=3   )
legend(270,72,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

plot.ts(ts(h12),pch=19,lwd=1, col="dark grey", main="(d). 27th Day Predictions (Actual Vs Predicted CPU Usage)  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h12fp, pch=18,lwd=1,col="black",lty=3   )
legend(270,70,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

#######################################

attach(mtcars)
par(mfrow=c(2,2)) 

plot.ts(ts(h13),pch=19,lwd=1, col="dark grey", main="(a). 28th Day Predictions (Actual Vs Predicted CPU Usage)  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h13fp, pch=18,lwd=1,col="black",lty=3   )
legend(270,74,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

plot.ts(ts(h14),pch=19,lwd=1, col="dark grey", main="(b). 29th Day Predictions (Actual Vs Predicted CPU Usage)  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h14fp, pch=18,lwd=1,col="black",lty=3   )
legend(270,70,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)




write.table(h1[,2], file = "h1.txt",)
write.csv(h1, file = "h1.csv")
write.csv(h2, file = "h2.csv")
write.csv(h3, file = "h3.csv")
write.csv(h4, file = "h4.csv")
write.csv(h5, file = "h5.csv")
write.csv(h6, file = "h6.csv")
write.csv(h7, file = "h7.csv")
write.csv(h8, file = "h8.csv")
write.csv(h9, file = "h9.csv")
write.csv(h10, file = "h10.csv")
write.csv(h11, file = "h11.csv")
write.csv(h12, file = "h12.csv")
write.csv(h13, file = "h13.csv")
write.csv(h14, file = "h14.csv")


plot.ts(h1, col = "blue", pch=4)
      points(yrcgpS,col = "red", pch=1 )



length(CPUPCh)
length(yrcgpS)

yrcgpSN<-as.integer(yrcgpS)

h1p<-yrcgpSN[1:288]
h2p<-yrcgpSN[289:576]
h3p<-yrcgpSN[577:864]
h4p<-yrcgpSN[865:1152]
h5p<-yrcgpSN[1153:1440]
h6p<-yrcgpSN[1441:1728]
h7p<-yrcgpSN[1729:2016]
h8p<-yrcgpSN[2017:2304]
h9p<-yrcgpSN[2305:2592]
h10p<-yrcgpSN[2593:2880]
h11p<-yrcgpSN[2881:3168]
h12p<-yrcgpSN[3169:3456]
h13p<-yrcgpSN[3457:3744]
h14p<-yrcgpSN[3745:4032]

h1p<-yrcgpSN[1:288]
h2p<-yrcgpSN[289:288*2]
h3p<-yrcgpSN[288*2+1:288*3]
h4p<-yrcgpSN[288*3+1:288*4]
h5p<-yrcgpSN[288*4+1:288*5]
h6p<-yrcgpSN[288*5+1:288*6]
h7p<-yrcgpSN[288*6+1:288*7]
h8p<-yrcgpSN[288*7+1:288*8]
h9p<-yrcgpSN[288*8+1:288*9]
h10p<-yrcgpSN[288*9+1:288*10]
h11p<-yrcgpSN[288*10+1:288*11]
h12p<-yrcgpSN[288*11+1:288*12]
h13p<-yrcgpSN[288*12+1:288*13]
h14p<-yrcgpSN[288*13+1:288*14]


write.csv(h1p, file = "h1p.csv")
write.csv(h2p, file = "h2p.csv")
write.csv(h3p, file = "h3p.csv")
write.csv(h4p, file = "h4p.csv")
write.csv(h5p, file = "h5p.csv")
write.csv(h6p, file = "h6p.csv")
write.csv(h7p, file = "h7p.csv")
write.csv(h8p, file = "h8p.csv")
write.csv(h9p, file = "h9p.csv")
write.csv(h10p, file = "h10p.csv")
write.csv(h11p, file = "h11p.csv")
write.csv(h12p, file = "h12p.csv")
write.csv(h13p, file = "h13p.csv")
write.csv(h14p, file = "h14p.csv")



attach(mtcars)
par(mfrow=c(2,2)) 

#5
plot.ts(ts(h1),pch=19,lwd=1, col="dark grey", main="(a). Class #1 Host #1 Actual Vs Predicted CPU Usage  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h1p, pch=18,lwd=1,col="black",lty=3   )
legend(270,90,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)


plot.ts(ts(h2),pch=19,lwd=1, col="dark grey", main="(b). Class #2 Host #1 Actual Vs Predicted CPU Usage  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h2p, pch=18,lwd=1,col="black",lty=3   )
legend(270,90,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

plot.ts(ts(h3),pch=19,lwd=1, col="dark grey", main="(c). Class #3 Host #1 Actual Vs Predicted CPU Usage  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h3p, pch=18,lwd=1,col="black",lty=3   )
legend(270,90,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

plot.ts(ts(h4),pch=19,lwd=1, col="dark grey", main="(d). Class #4 Host #1 Actual Vs Predicted CPU Usage  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h4p, pch=18,lwd=1,col="black",lty=3   )
legend(270,72,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

######################################


attach(mtcars)
par(mfrow=c(2,2)) 

plot.ts(ts(h5),pch=19,lwd=1, col="dark grey", main="(a). Class #1 Host #2 Actual Vs Predicted CPU Usage  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h5p, pch=18,lwd=1,col="black",lty=3  )
legend(270,70,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

plot.ts(ts(h6),pch=19,lwd=1, col="dark grey", main="(b). Class #2 Host #2 Actual Vs Predicted CPU Usage  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h6p, pch=18,lwd=1,col="black",lty=3   )
legend(270,69,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

plot.ts(ts(h7),pch=19,lwd=1, col="dark grey", main="(c). Class #3 Host #2 Actual Vs Predicted CPU Usage  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h7p, pch=18,lwd=1,col="black",lty=3   )
legend(270,80,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

plot.ts(ts(h8),pch=19,lwd=1, col="dark grey", main="(d). Class #4 Host #2 Actual Vs Predicted CPU Usage  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h8p, pch=18, lwd=1,col="black",lty=3   )
legend(270,70,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)


################################ h0st9to 12

attach(mtcars)
par(mfrow=c(2,2)) 


plot.ts(ts(h9),pch=19,lwd=1, col="dark grey", main="(a). Class #1 Host #3 Actual Vs Predicted CPU Usage  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h9p, pch=18,lwd=1,col="black",lty=3   )
legend(270,70,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

plot.ts(ts(h10),pch=19,lwd=1, col="dark grey", main="(b). Class #2 Host #3 Actual Vs Predicted CPU Usage  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h10p, pch=18,lwd=1,col="black",lty=3   )
legend(270,80,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

plot.ts(ts(h11),pch=19,lwd=1, col="dark grey", main="(c). Class #3 Host #3 Actual Vs Predicted CPU Usage  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h11p, pch=18,lwd=1,col="black",lty=3   )
legend(270,72,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

plot.ts(ts(h12),pch=19,lwd=1, col="dark grey", main="(d). Class #4 Host #3 Actual Vs Predicted CPU Usage  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h12p, pch=18,lwd=1,col="black",lty=3   )
legend(270,70,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)


#########################################
attach(mtcars)
par(mfrow=c(2,2)) 

plot.ts(ts(h13),pch=19,lwd=1, col="dark grey", main="(a). Host #13 Actual Vs Predicted CPU Usage  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h13p, pch=18,lwd=1,col="black",lty=3   )
legend(270,74,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)

plot.ts(ts(h14),pch=19,lwd=1, col="dark grey", main="(b). Host #14 Actual Vs Predicted CPU Usage  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(h14p, pch=18,lwd=1,col="black",lty=3   )
legend(270,70,legend= c("Actual","Predicted"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)





a1<-accuracy(h1p,h1)
a2<-accuracy(h2p,h2)
a3<-accuracy(h3p,h3)
a4<-accuracy(h4p,h4)
a5<-accuracy(h5p,h5)
a6<-accuracy(h6p,h6)
a7<-accuracy(h7p,h7)
a8<-accuracy(h8p,h8)
a9<-accuracy(h9p,h9)
a10<-accuracy(h10p,h10)
a11<-accuracy(h11p,h11)
a12<-accuracy(h12p,h12)
a13<-accuracy(h13p,h13)
a14<-accuracy(h14p,h14)



accuracy(h1p,h1)
accuracy(h2p,h2)
accuracy(h3p,h3)
accuracy(h4p,h4)
accuracy(h5p,h5)
accuracy(h6p,h6)
accuracy(h7p,h7)
accuracy(h8p,h8)
accuracy(h9p,h9)
accuracy(h10p,h10)
accuracy(h11p,h11)
accuracy(h12p,h12)
accuracy(h13p,h13)
accuracy(h14p,h14)




###########################################3333##########################33

% > accuracy(h1p,h1)
              ME     RMSE     MAE      MPE     MAPE
Test set 0.96875 0.984251 0.96875 1.751692 1.751692
> accuracy(h2p,h2)
                ME      RMSE       MAE       MPE      MAPE
Test set 0.2013889 0.4487637 0.2013889 0.3604859 0.3604859
> accuracy(h3p,h3)
                ME      RMSE       MAE       MPE      MAPE
Test set 0.2256944 0.4750731 0.2256944 0.4494144 0.4494144
> accuracy(h4p,h4)
                ME      RMSE       MAE       MPE      MAPE
Test set 0.2708333 0.5204165 0.2708333 0.5582536 0.5582536
> accuracy(h5p,h5)
                ME      RMSE       MAE      MPE     MAPE
Test set 0.5798611 0.7614861 0.5798611 1.190932 1.190932
> accuracy(h6p,h6)
              ME      RMSE     MAE       MPE      MAPE
Test set 0.46875 0.6846532 0.46875 0.9927723 0.9927723
> accuracy(h7p,h7)
                ME      RMSE       MAE      MPE     MAPE
Test set 0.7013889 0.8374896 0.7013889 1.375518 1.375518
> accuracy(h8p,h8)
                ME      RMSE       MAE      MPE     MAPE
Test set 0.5659722 0.7523113 0.5659722 1.091796 1.091796
> accuracy(h9p,h9)
                ME      RMSE       MAE      MPE     MAPE
Test set 0.2708333 0.5204165 0.2708333 0.577577 0.577577
> accuracy(h10p,h10)
                ME      RMSE       MAE       MPE      MAPE
Test set 0.2743056 0.5237419 0.2743056 0.5950396 0.5950396
> accuracy(h11p,h11)
                ME      RMSE       MAE       MPE      MAPE
Test set 0.3368056 0.5803495 0.3368056 0.6822436 0.6822436
> accuracy(h12p,h12)
                ME      RMSE       MAE      MPE     MAPE
Test set 0.8472222 0.9204468 0.8472222 1.670336 1.670336
> accuracy(h13p,h13)
              ME      RMSE     MAE      MPE     MAPE
Test set 0.65625 0.8100926 0.65625 1.303801 1.303801
> accuracy(h14p,h14)
                ME      RMSE       MAE       MPE      MAPE
Test set 0.4618056 0.6795628 0.4618056 0.9137491 0.9137491
> 
######################################################################3 Sacling
##h1p
C1<-as.vector(matrix(0,nrow=288))

#m1=mean(CPUPCh)
pc1S<-as.vector(matrix(0,nrow=288))
set.seed(4201)
for(j in 1:length(h1p) ){
if(h1p[j]<= 10)
{pc1S[j]<-227}
else if((h1p[j] > 10) && (h1p[j] <= 20) )
  pc1S[j]<-272
else if((h1p[j] > 20) && (h1p[j] <= 30) )
  pc1S[j]<-315
else if((h1p[j] > 30) && (h1p[j] <= 40) )
  pc1S[j]<-358

else if((h1p[j] > 40) && (h1p[j] <= 50) )
  pc1S[j]<-409
else if((h1p[j] > 50) && (h1p[j] <= 60) )
  pc1S[j]<-474
else if((h1p[j] > 60) && (h1p[j] <= 70) )
  pc1S[j]<-548
else if((h1p[j] > 70) && (h1p[j] <= 80) )
  pc1S[j]<-632
else if((h1p[j] > 80) && (h1p[j] <= 90) )
  pc1S[j]<-740
else if((h1p[j] > 90) && (h1p[j] <= 100) )
  pc1S[j]<-849
}

################Power Av. W

849
740
632
548
474
409
358
315
272
227


#################################
##h2p
pc2S<-as.vector(matrix(0,nrow=288))
set.seed(4201)
for(j in 1:length(h1p) ){
if(h2p[j]<= 10)
{pc2S[j]<-114}
else if((h2p[j] > 10) && (h2p[j] <= 20) )
  pc2S[j]<-137
else if((h2p[j] > 20) && (h2p[j] <= 30) )
  pc2S[j]<-159
else if((h2p[j] > 30) && (h2p[j] <= 40) )
  pc2S[j]<-182

else if((h2p[j] > 40) && (h2p[j] <= 50) )
  pc2S[j]<-208
else if((h2p[j] > 50) && (h2p[j] <= 60) )
  pc2S[j]<-240
else if((h2p[j] > 60) && (h2p[j] <= 70) )
  pc2S[j]<-277
else if((h2p[j] > 70) && (h2p[j] <= 80) )
  pc2S[j]<-319
else if((h2p[j] > 80) && (h2p[j] <= 90) )
  pc2S[j]<-376
else if((h2p[j] > 90) && (h2p[j] <= 100) )
  pc2S[j]<-432
}


###class 2 host1 power

432
376
319
277
240
208
182
159
137
114
##############################
#################################
##h3p    c3S    672
pc3S<-as.vector(matrix(0,nrow=288))
set.seed(4201)
for(j in 1:length(h3p) ){
if(h3p[j]<= 10)
{pc3S[j]<-1501}
else if((h3p[j] > 10) && (h3p[j] <= 20) )
  pc3S[j]<-1765
else if((h3p[j] > 20) && (h3p[j] <= 30) )
  pc3S[j]<-2018
else if((h3p[j] > 30) && (h3p[j] <= 40) )
  pc3S[j]<-2274

else if((h3p[j] > 40) && (h3p[j] <= 50) )
  pc3S[j]<-2577
else if((h3p[j] > 50) && (h3p[j] <= 60) )
  pc3S[j]<-2982
else if((h3p[j] > 60) && (h3p[j] <= 70) )
  pc3S[j]<-3456
else if((h3p[j] > 70) && (h3p[j] <= 80) )
  pc3S[j]<-3995
else if((h3p[j] > 80) && (h3p[j] <= 90) )
  pc3S[j]<-4789
else if((h3p[j] > 90) && (h3p[j] <= 100) )
  pc3S[j]<-5409
}

##############################class 3 host1 power
5,409
4,789
3,995
3,456
2,982
2,577
2,274
2,018
1,765
1,501

#################################
##h4p
pc4S<-as.vector(matrix(0,nrow=288))
set.seed(4201)
for(j in 1:length(h4p) ){
if(h4p[j]<= 10)
{pc4S[j]<-1347}
else if((h4p[j] > 10) && (h4p[j] <= 20) )
  pc4S[j]<-1603
else if((h4p[j] > 20) && (h4p[j] <= 30) )
  pc4S[j]<-1889
else if((h4p[j] > 30) && (h4p[j] <= 40) )
  pc4S[j]<-2200
else if((h4p[j] > 40) && (h4p[j] <= 50) )
  pc4S[j]<-2533
else if((h4p[j] > 50) && (h4p[j] <= 60) )
  pc4S[j]<-2899
else if((h4p[j] > 60) && (h4p[j] <= 70) )
  pc4S[j]<-3313
else if((h4p[j] > 70) && (h4p[j] <= 80) )
  pc4S[j]<-3894
else if((h4p[j] > 80) && (h4p[j] <= 90) )
  pc4S[j]<-4464
else if((h4p[j] > 90) && (h4p[j] <= 100) )
  pc4S[j]<-4940
}

############class 4 host1 power

4,940
4,464
3,894
3,313
2,899
2,533
2,200
1,889
1,603
1,347
##############################
################################# class 1 host 2   pc1S[16]<-409
##h5p
pc1S<-as.vector(matrix(0,nrow=288))
set.seed(4201)
for(j in 1:length(h5p) ){
if(h5p[j]<= 10)
{pc1S[j]<-227}
else if((h5p[j] > 10) && (h5p[j] <= 20) )
  pc1S[j]<-272
else if((h5p[j] > 20) && (h5p[j] <= 30) )
  pc1S[j]<-315
else if((h5p[j] > 30) && (h5p[j] <= 40) )
  pc1S[j]<-358

else if((h1p[j] > 40) && (h5p[j] <= 50) )
  pc1S[j]<-409
else if((h5p[j] > 50) && (h5p[j] <= 60) )
  pc1S[j]<-474
else if((h5p[j] > 60) && (h5p[j] <= 70) )
  pc1S[j]<-548
else if((h1p[j] > 70) && (h5p[j] <= 80) )
  pc1S[j]<-632
else if((h5p[j] > 80) && (h5p[j] <= 90) )
  pc1S[j]<-740
else if((h5p[j] > 90) && (h5p[j] <= 100) )
  pc1S[j]<-849
}



##############################

849
740
632
548
474
409
358
315
272
227
#################################class 2 hst2
##h6p
pc2S<-as.vector(matrix(0,nrow=288))
set.seed(4201)
for(j in 1:length(h6p) ){
if(h6p[j]<= 10)
{pc2S[j]<-114}
else if((h6p[j] > 10) && (h6p[j] <= 20) )
  pc2S[j]<-137
else if((h6p[j] > 20) && (h6p[j] <= 30) )
  pc2S[j]<-159
else if((h6p[j] > 30) && (h6p[j] <= 40) )
  pc2S[j]<-182

else if((h6p[j] > 40) && (h6p[j] <= 50) )
  pc2S[j]<-208
else if((h6p[j] > 50) && (h6p[j] <= 60) )
  pc2S[j]<-240
else if((h6p[j] > 60) && (h6p[j] <= 70) )
  pc2S[j]<-277
else if((h6p[j] > 70) && (h6p[j] <= 80) )
  pc2S[j]<-319
else if((h6p[j] > 80) && (h6p[j] <= 90) )
  pc2S[j]<-376
else if((h6p[j] > 90) && (h6p[j] <= 100) )
  pc2S[j]<-432
}

###class 2 host2 power

432
376
319
277
240
208
182
159
137
114
##############################

##############################
################################# class 3 host 2
##h7p
pc3S<-as.vector(matrix(0,nrow=288))
set.seed(4201)
for(j in 1:length(h7p) ){
if(h7p[j]<= 10)
{pc3S[j]<-1501}
else if((h7p[j] > 10) && (h7p[j] <= 20) )
  pc3S[j]<-1765
else if((h7p[j] > 20) && (h7p[j] <= 30) )
  pc3S[j]<-2018
else if((h7p[j] > 30) && (h7p[j] <= 40) )
  pc3S[j]<-2274

else if((h7p[j] > 40) && (h7p[j] <= 50) )
  pc3S[j]<-2577
else if((h7p[j] > 50) && (h7p[j] <= 60) )
  pc3S[j]<-2982
else if((h7p[j] > 60) && (h7p[j] <= 70) )
  pc3S[j]<-3456
else if((h7p[j] > 70) && (h7p[j] <= 80) )
  pc3S[j]<-3995
else if((h7p[j] > 80) && (h7p[j] <= 90) )
  pc3S[j]<-4789
else if((h7p[j] > 90) && (h7p[j] <= 100) )
  pc3S[j]<-5409
}

##############################class 3 host 2 power
5,409
4,789
3,995
3,456
2,982
2,577
2,274
2,018
1,765
1,501

#################################


##############################
################################# class 4 host 2
##h8p
pc4S<-as.vector(matrix(0,nrow=288))
set.seed(4201)
for(j in 1:length(h8p) ){
if(h8p[j]<= 10)
{pc4S[j]<-1347}
else if((h8p[j] > 10) && (h8p[j] <= 20) )
  pc4S[j]<-1603
else if((h8p[j] > 20) && (h8p[j] <= 30) )
  pc4S[j]<-1889
else if((h8p[j] > 30) && (h8p[j] <= 40) )
  pc4S[j]<-2200

else if((h8p[j] > 40) && (h8p[j] <= 50) )
  pc4S[j]<-2533
else if((h8p[j] > 50) && (h8p[j] <= 60) )
  pc4S[j]<-2899
else if((h8p[j] > 60) && (h8p[j] <= 70) )
  pc4S[j]<-3313
else if((h8p[j] > 70) && (h8p[j] <= 80) )
  pc4S[j]<-3894
else if((h8p[j] > 80) && (h8p[j] <= 90) )
  pc4S[j]<-4464
else if((h8p[j] > 90) && (h8p[j] <= 100) )
  pc4S[j]<-4940
}

############class 4 host 2 power

4940
4464
3894
3313
2899
2533
2200
1889
1603
1347
##############################

##############################
#################################
##h9p
pc1S<-as.vector(matrix(0,nrow=288))
set.seed(4201)
for(j in 1:length(h9p) ){
if(h1p[j]<= 10)
{pc1S[j]<-227}
else if((h9p[j] > 10) && (h9p[j] <= 20) )
  pc1S[j]<-272
else if((h9p[j] > 20) && (h9p[j] <= 30) )
  pc1S[j]<-315
else if((h9p[j] > 30) && (h9p[j] <= 40) )
  pc1S[j]<-358

else if((h9p[j] > 40) && (h9p[j] <= 50) )
  pc1S[j]<-409
else if((h9p[j] > 50) && (h9p[j] <= 60) )
  pc1S[j]<-474
else if((h9p[j] > 60) && (h9p[j] <= 70) )
  pc1S[j]<-548
else if((h9p[j] > 70) && (h9p[j] <= 80) )
  pc1S[j]<-632
else if((h9p[j] > 80) && (h9p[j] <= 90) )
  pc1S[j]<-740
else if((h9p[j] > 90) && (h9p[j] <= 100) )
  pc1S[j]<-849
}



##############################

849
740
632
548
474
409
358
315
272
227

#################################
##h10p
pc2S<-as.vector(matrix(0,nrow=288))
set.seed(4201)
for(j in 1:length(h10p) ){
if(h10p[j]<= 10)
{pc2S[j]<-114}
else if((h10p[j] > 10) && (h10p[j] <= 20) )
  pc2S[j]<-137
else if((h10p[j] > 20) && (h10p[j] <= 30) )
  pc2S[j]<-159
else if((h10p[j] > 30) && (h10p[j] <= 40) )
  pc2S[j]<-182

else if((h10p[j] > 40) && (h10p[j] <= 50) )
  pc2S[j]<-208
else if((h10p[j] > 50) && (h10p[j] <= 60) )
  pc2S[j]<-240
else if((h10p[j] > 60) && (h10p[j] <= 70) )
  pc2S[j]<-277
else if((h10p[j] > 70) && (h10p[j] <= 80) )
  pc2S[j]<-319
else if((h10p[j] > 80) && (h10p[j] <= 90) )
  pc2S[j]<-376
else if((h10p[j] > 90) && (h10p[j] <= 100) )
  pc2S[j]<-432
}

###class 2 host2 power

432
376
319
277
240
208
182
159
137
114
##############################


##############################
#################################
##h11p
pc3S<-as.vector(matrix(0,nrow=288))
set.seed(4201)
for(j in 1:length(h11p) ){
if(h11p[j]<= 10)
{pc3S[j]<-1501}
else if((h11p[j] > 10) && (h11p[j] <= 20) )
  pc3S[j]<-1765
else if((h11p[j] > 20) && (h11p[j] <= 30) )
  pc3S[j]<-2018
else if((h11p[j] > 30) && (h11p[j] <= 40) )
  pc3S[j]<-2274
else if((h11p[j] > 40) && (h11p[j] <= 50) )
  pc3S[j]<-2577
else if((h11p[j] > 50) && (h11p[j] <= 60) )
  pc3S[j]<-2982
else if((h11p[j] > 60) && (h11p[j] <= 70) )
  pc3S[j]<-3456
else if((h11p[j] > 70) && (h11p[j] <= 80) )
  pc3S[j]<-3995
else if((h11p[j] > 80) && (h11p[j] <= 90) )
  pc3S[j]<-4789
else if((h11p[j] > 90) && (h11p[j] <= 100) )
  pc3S[j]<-5409

}

##############################class 3 host 3 power
5,409
4,789
3,995
3,456
2,982
2,577
2,274
2,018
1,765
1,501

#################################


##############################
#################################
##h12p
pc4S<-as.vector(matrix(0,nrow=288))
set.seed(4201)
for(j in 1:length(h12p) ){
if(h12p[j]<= 10)
{pc4S[j]<-1347}
else if((h12p[j] > 10) && (h12p[j] <= 20) )
  pc4S[j]<-1603
else if((h12p[j] > 20) && (h12p[j] <= 30) )
  pc4S[j]<-1889
else if((h12p[j] > 30) && (h12p[j] <= 40) )
  pc4S[j]<-2200
else if((h12p[j] > 40) && (h12p[j] <= 50) )
  pc4S[j]<-2533
else if((h12p[j] > 50) && (h12p[j] <= 60) )
  pc4S[j]<-2899
else if((h12p[j] > 60) && (h12p[j] <= 70) )
  pc4S[j]<-3313
else if((h12p[j] > 70) && (h12p[j] <= 80) )
  pc4S[j]<-3894
else if((h12p[j] > 80) && (h12p[j] <= 90) )
  pc4S[j]<-4464
else if((h12p[j] > 90) && (h12p[j] <= 100) )
  pc4S[j]<-4940
}




############class 4 host 3 power

4940
4464
3894
3313
2899
2533
2200
1889
1603
1347
##########
write.csv(pc1S, file = "c1h1.csv")
write.csv(pc2S, file = "c2h1.csv")
write.csv(pc3S, file = "c3h1.csv")
write.csv(pc4S, file = "c4h1.csv")
write.csv(pc1S, file = "c1h2.csv")
write.csv(pc2S, file = "c2h2.csv")
write.csv(pc3S, file = "c3h2.csv")
write.csv(pc4S, file = "c4h2.csv")
write.csv(pc1S, file = "c1h3.csv")
write.csv(pc2S, file = "c2h3.csv")
write.csv(pc3S, file = "c3h3.csv")
write.csv(pc4S, file = "c4h3.csv")




EM<-read.csv("C:\\Users\\Haier\\Documents\\EnergyM.csv")
EM$c1h1


attach(mtcars)
par(mfrow=c(2,2)) 

#5
plot.ts(ts(EM$c1h1/1000),pch=19,lwd=1, col="dark grey", main="(a). Class #1 Hosts Energy Consumption  ",xlab="Time(5 minutes spanned)", ylab="Energy (Kilo-Joules)")
lines(EM$c1h2/1000, pch=18,lwd=1,col="black",lty=4   )
lines(EM$c1h3/1000, pch=18,lwd=1,col="black",lty=7   )
legend("topleft",legend= c("Host-1","Host-2", "Host-3"),lty=c(1,4,7),col=c("dark grey","black", "black"),box.lty=0, cex=0.4)


plot.ts(ts(EM$c2h1/1000),pch=19,lwd=1, col="dark grey", main="(b). Class #2 Hosts Energy Consumption  ",xlab="Time(5 minutes spanned)", ylab="Energy (Kilo-Joules)",ylim=c(1,150) )
lines(EM$c2h2/1000, pch=18,lwd=1,col="black",lty=4   )
lines(EM$c2h3/1000, pch=18,lwd=1,col="black",lty=7   )
legend("topleft",legend= c("Host-1","Host-2", "Host-3"),lty=c(1,4,7),col=c("dark grey","black", "black"),box.lty=0, cex=0.4)

plot.ts(ts(EM$c3h1/1000),pch=19,lwd=1, col="dark grey", main="(c). Class #3 Hosts Energy Consumption  ",xlab="Time(5 minutes spanned)", ylab="Energy (Kilo-Joules)")
lines(EM$c3h2/1000, pch=18,lwd=1,col="black",lty=4   )
lines(EM$c3h3/1000, pch=18,lwd=1,col="black",lty=7   )
legend("topleft",legend= c("Host-1","Host-2", "Host-3"),lty=c(1,4,7),col=c("dark grey","black", "black"),box.lty=0, cex=0.4)

plot.ts(ts(EM$c4h1/1000),pch=19,lwd=1, col="dark grey", main="(d). Class #4 Hosts Energy Consumption  ",xlab="Time(5 minutes spanned)", ylab="Energy (Kilo-Joules)", ylim=c(1,1200))
lines(EM$c4h2/1000, pch=18,lwd=1,col="black",lty=4   )
lines(EM$c4h3/1000, pch=18,lwd=1,col="black",lty=7   )
legend("topleft",legend= c("Host-1","Host-2", "Host-3"),lty=c(1,4,7),col=c("dark grey","black", "black"),box.lty=0, cex=0.4)

#################### Host 3 power sum

sum(pc1S)
sum(pc2S)
sum(pc3S)
sum(pc4S)

sum(pc1S)
[1] 105012
> sum(pc2S)
[1] 53967
> sum(pc3S)
[1] 691466
> sum(pc4S)
[1] 764068

############################## Host 2 Power Sum
sum(pc1S)
[1] 113717
> sum(pc2S)
[1] 55190
> sum(pc3S)
[1] 760077
> sum(pc4S)
[1] 712774
 
################# Host 1 power sum
> sum(pc1S)
[1] 137778
> sum(pc2S)
[1] 51946
> sum(pc3S)
[1] 664470
> sum(pc4S)
[1] 637766


####################33333
plot.ts(h1p,c1S)

plot.ts(ts(c1S),pch=19,lwd=1, col="dark grey", main="(b). Host #14 Actual Vs Predicted CPU Usage  ",xlab="Time(5 minutes spanned)", ylab="CPU Usage (%)")
lines(ts(h1p), pch=18,lwd=1,col="black",lty=3   )
legend(270,70,legend= c("Predicted","Scaled"),lty=c(1,3),col=c("dark grey","black"),box.lty=0, cex=0.4)


#######################################################33

attach(mtcars)
par(mfrow=c(2,2)) 

## set up some fake test data
#time <- seq(0,72,12)
#betagal.abs <- c(0.05,0.18,0.25,0.31,0.32,0.34,0.35)
#cell.density <- c(0,1000,2000,3000,4000,5000,6000)

## add extra space to right margin of plot within frame
par(mar=c(5, 4, 4, 6) + 0.1)

## Plot first set of data and draw its axis
plot(x1, c1S, pch=16,lty  = "dashed",type="l", axes=FALSE, ylim=c(1,112), xlab="", ylab="",col="black", main="Class #1 Host #2 CPU Scaling and Average Power Dissipation  ")  

axis(2, ylim=c(1,112),col="dark grey",las=1)  ## las=1 makes horizontal labels
mtext("Number of ON Cores",side=2,line=2.5)
box()

## Allow a second plot on the same graph
par(new=TRUE)

## Plot the second plot and put axis scale on right
plot(x1, pc1S, pch=18,  xlab="", ylab="", ylim=c(1,900), 
    axes=FALSE, type="s", col="black") #type="b",

# type="h"  for histogram
# type="s"  for stair step
## a little farther out (line=4) to make room for labels
mtext("Average Power (W)",side=4,col="black",line=4) 
axis(4, ylim=c(1,900), col="black",col.axis="black",las=1)

## Draw the time axis
axis(1,pretty(range(x1),10))
mtext("Time (5 minutes spanned)",side=1,col="black",line=2.5)  

## Add Legend
legend("topleft",legend=c("Number of ON Cores","Average Power (W)"),lty=c(3,1),
col=c("dark grey","black"),box.lty=0, cex=0.4)



###############################c2S

par(mar=c(5, 4, 4, 6) + 0.1)

## Plot first set of data and draw its axis
plot(x1, c2S, pch=16,lty  = "dashed",type="l", axes=FALSE, ylim=c(1,56), xlab="", ylab="",col="black", main="Class #2 Host #2 CPU Scaling and Average Power Dissipation")  

  

axis(2, ylim=c(1,56),col="dark grey",las=1)  ## las=1 makes horizontal labels
mtext("Number of ON Cores",side=2,line=2.5)
box()

## Allow a second plot on the same graph
par(new=TRUE)

## Plot the second plot and put axis scale on right
plot(x1, pc2S, pch=18,  xlab="", ylab="", ylim=c(1,500), 
    axes=FALSE, type="s", col="black") #type="b",

# type="h"  for histogram
# type="s"  for stair step
## a little farther out (line=4) to make room for labels
mtext("Average Power (W)",side=4,col="black",line=4) 
axis(4, ylim=c(1,500), col="black",col.axis="black",las=1)

## Draw the time axis
axis(1,pretty(range(x1),10))
mtext("Time (5 minutes spanned)",side=1,col="black",line=2.5)  

## Add Legend
legend("topright",legend=c("Number of Cores","Average Power (W)"),lty=c(3,1),
col=c("dark grey","black"),box.lty=0, cex=0.4)


 ################c3S
par(mar=c(5, 4, 4, 6) + 0.1)

## Plot first set of data and draw its axis
plot(x1, c3S, pch=16,lty  = "dashed",type="l", axes=FALSE, ylim=c(1,672), xlab="", ylab="",col="black", main="Class #3 Host #2 CPU Scaling and Average Power Dissipation  ")  



axis(2, ylim=c(1,672),col="dark grey",las=1)  ## las=1 makes horizontal labels
mtext("Number of ON Cores",side=2,line=2.5)
box()

## Allow a second plot on the same graph
par(new=TRUE)

## Plot the second plot and put axis scale on right
plot(x1, pc3S, pch=18,  xlab="", ylab="", ylim=c(1,6000), 
    axes=FALSE, type="s", col="black") #type="b",

# type="h"  for histogram
# type="s"  for stair step
## a little farther out (line=4) to make room for labels
mtext("Average Power (W)",side=4,col="black",line=4) 
axis(4, ylim=c(1,6000), col="black",col.axis="black",las=1)

## Draw the time axis
axis(1,pretty(range(x1),10))
mtext("Time (5 minutes spanned)",side=1,col="black",line=2.5)  

## Add Legend
legend("topleft",legend=c("Number of Cores","Average Power (W)"),lty=c(3,1),
col=c("dark grey","black"),box.lty=0, cex=0.4)


#########################33  c4S
par(mar=c(5, 4, 4, 6) + 0.1)

## Plot first set of data and draw its axis
plot(x1, c4S, pch=16,lty  = "dashed",type="l", axes=FALSE, ylim=c(1,10), xlab="", ylab="",col="black", main="Class #4 Host #2 CPU Scaling and Average Power Dissipation  ")  

  

axis(2, ylim=c(1,10),col="dark grey",las=1)  ## las=1 makes horizontal labels
mtext("Number of ON Nodes",side=2,line=2.5)
box()

## Allow a second plot on the same graph
par(new=TRUE)

## Plot the second plot and put axis scale on right
plot(x1, pc4S, pch=18,  xlab="", ylab="", ylim=c(1,5000), 
    axes=FALSE, type="s", col="black") #type="b",

# type="h"  for histogram
# type="s"  for stair step
## a little farther out (line=4) to make room for labels
mtext("Average Power (W)",side=4,col="black",line=4) 
axis(4, ylim=c(1,5000), col="black",col.axis="black",las=1)

## Draw the time axis
axis(1,pretty(range(x1),10))
mtext("Time (5 minutes spanned)",side=1,col="black",line=2.5)  

## Add Legend
legend("topleft",legend=c("Number of Nodes","Average Power (W)"),lty=c(3,1),
col=c("dark grey","black"),box.lty=0, cex=0.4)



######################################################


# text.col=c("dark grey","black"),pch=c(16,15),col=c("dark grey","black"))



######################################################3
h1p.x
library(plotrix)
########################################
x1<-c(1:288)
dualplot(x1, y1, y2, x2 = x1, 
                     col = c("#C54E6D", "#009380"),
                     lwd = c(1, 1), colgrid = NULL,
                     mar = c(3, 6, 3, 6) + 0.1, 
                     ylab1 = paste(substitute(y1), collapse = ""), 
                     ylab2 = paste(substitute(y2), collapse = ""),
                     nxbreaks = 5, 
                     yleg1 = paste(gsub("\n$", "", ylab1), "(left axis)"), 
                     yleg2 = paste(ylab2, "(right axis)"),
                     ylim1 = NULL, ylim2 = NULL, ylim.ref = NULL,
                     xlab = "", main = NULL, legx = "topleft", legy = NULL, 
                     silent = FALSE, bty = "n", ...)



dualplot(x1,h1p,c1S,x2=x1)
################################################3

## set up some fake test data
time <- seq(0,72,12)
betagal.abs <- c(0.05,0.18,0.25,0.31,0.32,0.34,0.35)
cell.density <- c(0,1000,2000,3000,4000,5000,6000)

## add extra space to right margin of plot within frame
par(mar=c(5, 4, 4, 6) + 0.1)

## Plot first set of data and draw its axis
plot(time, betagal.abs, pch=16, axes=FALSE, ylim=c(0,1), xlab="", ylab="", 
   type="b",col="black", main="Mike's test data")
axis(2, ylim=c(0,1),col="black",las=1)  ## las=1 makes horizontal labels
mtext("Beta Gal Absorbance",side=2,line=2.5)
box()

## Allow a second plot on the same graph
par(new=TRUE)

## Plot the second plot and put axis scale on right
plot(time, cell.density, pch=15,  xlab="", ylab="", ylim=c(0,7000), 
    axes=FALSE, type="b", col="red")
## a little farther out (line=4) to make room for labels
mtext("Cell Density",side=4,col="red",line=4) 
axis(4, ylim=c(0,7000), col="red",col.axis="red",las=1)

## Draw the time axis
axis(1,pretty(range(time),10))
mtext("Time (Hours)",side=1,col="black",line=2.5)  

## Add Legend
legend("topleft",legend=c("Beta Gal","Cell Density"),
  text.col=c("black","red"),pch=c(16,15),col=c("black","red"))



#######################################################3

bar(a1[1,5])


accuracy(CPUW5$y[4174:8347],yrcgp)




#else if(ys[j]< mean(ys[j]))
#yt[j]<-ys[j]+0.04635
#else yt[j]<-ys[j]+0.04635

#}


accuracy(CPUW5$y[4174:8347],yt)


plot(CPUW5$y[4174:8347], lty=3,col=1)
lines(yt, col=5)


p1<-ys
plot(CPUW5$y[4174:8347], lty=3,col=1)
lines(yn, col=2)
yn<-CPUW5$y[4174:8347]+0.04635
accuracy(CPUW5$y[4174:8347],yn)
              ME    RMSE     MAE      MPE     MAPE
Test set 0.04635 0.04635 0.04635 11.37495 11.37495
##############################################################3
#############################################################

accuracy(CPUW5$y[4174:8347],yn)
                   ME       RMSE        MAE      MPE     MAPE
Test set -0.002123404 0.07822726 0.05911035 1.035751 15.16456


###########################33
accuracy(CPUW5$y[4174:8347],ys)
                   ME       RMSE        MAE      MPE     MAPE
Test set -0.002168416 0.07457249 0.05600315 1.172329 14.47202
ys[i]<-(n21+x4[i]+x3[i]+x2[i]+x1[i]+n20)/6   
##########################################
accuracy(CPUW5$y[4174:8347],ys)
                   ME       RMSE       MAE      MPE     MAPE
Test set -0.002156766 0.07596589 0.0571939 1.122652 14.72142
ys[i]<-(n21+x2[i]+n20+x3[i]+x4[i]+x0[i])/6
####################################################3

x3[i]*-0.999448609+x1[i]*0.975382807+x0[i]*-0.982697096+x1[i]*0.979656103+x0[i]*-0.970994118



7	x3[i]	-0.999448609
	x1[i]	0.975382807
	x0[i]	-0.982697096
	x1[i]	0.979656103
	x0[i]	-0.970994118


n8<-sigmoid(n7*(-0.539523242)+n6*0.491734746+n5*0.02705971+x4[i]*0.143474725+x4[i]*-0.601916252)
n9<-sigmoid(x0[i]*-0.75989462+n8*0.048235005+x4[i]*-0.097955664+x1[i]*-0.873630507+n5*0.132408839)
n10<-sigmoid(x0[i]*-0.994272874+n8*0.976679028+x3[i]*-0.986520556+x0[i]*-0.985976986+x0[i]*-0.992489562)
n11<-sigmoid(x3[i]*0.433099563+n9*0.848981216+x0[i]*0.348491568+	x1[i]*0.53241466+	n7*-0.371502855)
n12<-sigmoid(n8*-0.652311893+	n8*-0.236627174+n8*-0.525020231+n7*0.056080529+x0[i]*-0.370064069)
n13<-sigmoid(n12*0.660042282+	n10*0.995998154+	x3[i]*0.551665019+x1[i]*-0.677119584+n5*-0.692222669)
n14<-sigmoid(x3[i]*-0.998688241+x3[i]*-0.978921784+n8*0.990034621+x3[i]*-0.966987596+n8*0.998405675)
n15<-sigmoid(n8*-0.847024843+n13*-0.244673164+x0[i]*-0.588255352+x2[i]*0.647021878+x1[i]*0.876332234)
n16<-sigmoid(x4[i]*0.840663869+x0[i]*-0.011851347+n9*-0.184688541+n14*-0.334850961+	n15*0.517705818)
n20<-sigmoid(n15*-0.605733314+n15*-0.998158624+	x3[i]*0.999717273+n11*-0.92657599+n11*-0.98455636)
n21<- sigmoid(n13*0.430962424+n20*-0.998921473+	n9*0.034041672+n13*0.180002296+n16*0.703225416)

8	7	-0.539523242
	6	0.491734746
	5	0.02705971
	In4	0.143474725
	In4	-0.601916252

n9<-sigmoid(x0[i]*-0.75989462+n8*0.048235005+x4[i]*-0.097955664+x1[i]*-0.873630507+n5*0.132408839)
n10<-sigmoid(x0[i]*-0.994272874+n8*0.976679028+x3[i]*-0.986520556+x0[i]*-0.985976986+x0[i]*-0.992489562)
n11<-sigmoid(x3[i]*0.433099563+n9*0.848981216+x0[i]*0.348491568+	x1[i]*0.53241466+	n7*-0.371502855)
n12<-sigmoid(n8*-0.652311893+	n8*-0.236627174+n8*-0.525020231+n7*0.056080529+x0[i]*-0.370064069)
n13<-sigmoid(n12*0.660042282+	n10*0.995998154+	x3[i]*0.551665019+x1[i]*-0.677119584+n5*-0.692222669)
n14<-sigmoid(x3[i]*-0.998688241+x3[i]*-0.978921784+n8*0.990034621+x3[i]*-0.966987596+n8*0.998405675)
n15<-sigmoid(n8*-0.847024843+n13*-0.244673164+x0[i]*-0.588255352+x2[i]*0.647021878+x1[i]*0.876332234)
n16<-sigmoid(x4[i]*0.840663869+x0[i]*-0.011851347+n9*-0.184688541+n14*-0.334850961+	n15*0.517705818)
n20<-sigmoid(n15*-0.605733314+n15*-0.998158624+	x3[i]*0.999717273+n11*-0.92657599+n11*-0.98455636)
n21<- sigmoid(n13*0.430962424+n20*-0.998921473+	n9*0.034041672+n13*0.180002296+n16*0.703225416)



9	In0	-0.75989462
	8	0.048235005
	In4	-0.097955664
	In1	-0.873630507
	5	0.132408839

n10<-sigmoid(x0[i]*-0.994272874+n8*0.976679028+x3[i]*-0.986520556+x0[i]*-0.985976986+x0[i]*-0.992489562)
n11<-sigmoid(x3[i]*0.433099563+n9*0.848981216+x0[i]*0.348491568+	x1[i]*0.53241466+	n7*-0.371502855)
n12<-sigmoid(n8*-0.652311893+	n8*-0.236627174+n8*-0.525020231+n7*0.056080529+x0[i]*-0.370064069)
n13<-sigmoid(n12*0.660042282+	n10*0.995998154+	x3[i]*0.551665019+x1[i]*-0.677119584+n5*-0.692222669)
n14<-sigmoid(x3[i]*-0.998688241+x3[i]*-0.978921784+n8*0.990034621+x3[i]*-0.966987596+n8*0.998405675)
n15<-sigmoid(n8*-0.847024843+n13*-0.244673164+x0[i]*-0.588255352+x2[i]*0.647021878+x1[i]*0.876332234)
n16<-sigmoid(x4[i]*0.840663869+x0[i]*-0.011851347+n9*-0.184688541+n14*-0.334850961+	n15*0.517705818)
n20<-sigmoid(n15*-0.605733314+n15*-0.998158624+	x3[i]*0.999717273+n11*-0.92657599+n11*-0.98455636)
n21<- sigmoid(n13*0.430962424+n20*-0.998921473+	n9*0.034041672+n13*0.180002296+n16*0.703225416)


10	In0	-0.994272874
	8	0.976679028
	In3	-0.986520556
	In0	-0.985976986
	In0	-0.992489562

n11<-sigmoid(x3[i]*0.433099563+n9*0.848981216+x0[i]*0.348491568+	x1[i]*0.53241466+	n7*-0.371502855)
n12<-sigmoid(n8*-0.652311893+	n8*-0.236627174+n8*-0.525020231+n7*0.056080529+x0[i]*-0.370064069)
n13<-sigmoid(n12*0.660042282+	n10*0.995998154+	x3[i]*0.551665019+x1[i]*-0.677119584+n5*-0.692222669)
n14<-sigmoid(x3[i]*-0.998688241+x3[i]*-0.978921784+n8*0.990034621+x3[i]*-0.966987596+n8*0.998405675)
n15<-sigmoid(n8*-0.847024843+n13*-0.244673164+x0[i]*-0.588255352+x2[i]*0.647021878+x1[i]*0.876332234)
n16<-sigmoid(x4[i]*0.840663869+x0[i]*-0.011851347+n9*-0.184688541+n14*-0.334850961+	n15*0.517705818)
n20<-sigmoid(n15*-0.605733314+n15*-0.998158624+	x3[i]*0.999717273+n11*-0.92657599+n11*-0.98455636)
n21<- sigmoid(n13*0.430962424+n20*-0.998921473+	n9*0.034041672+n13*0.180002296+n16*0.703225416)

11	In3	0.433099563
	9	0.848981216
	In0	0.348491568
	In1	0.53241466
	7	-0.371502855


n12<-sigmoid(n8*-0.652311893+	n8*-0.236627174+n8*-0.525020231+n7*0.056080529+x0[i]*-0.370064069)
n13<-sigmoid(n12*0.660042282+	n10*0.995998154+	x3[i]*0.551665019+x1[i]*-0.677119584+n5*-0.692222669)
n14<-sigmoid(x3[i]*-0.998688241+x3[i]*-0.978921784+n8*0.990034621+x3[i]*-0.966987596+n8*0.998405675)
n15<-sigmoid(n8*-0.847024843+n13*-0.244673164+x0[i]*-0.588255352+x2[i]*0.647021878+x1[i]*0.876332234)
n16<-sigmoid(x4[i]*0.840663869+x0[i]*-0.011851347+n9*-0.184688541+n14*-0.334850961+	n15*0.517705818)
n20<-sigmoid(n15*-0.605733314+n15*-0.998158624+	x3[i]*0.999717273+n11*-0.92657599+n11*-0.98455636)
n21<- sigmoid(n13*0.430962424+n20*-0.998921473+	n9*0.034041672+n13*0.180002296+n16*0.703225416)

12	8	-0.652311893
	8	-0.236627174
	8	-0.525020231
	7	0.056080529
	In0	-0.370064069

n13<-sigmoid(n12*0.660042282+	n10*0.995998154+	x3[i]*0.551665019+x1[i]*-0.677119584+n5*-0.692222669)
n14<-sigmoid(x3[i]*-0.998688241+x3[i]*-0.978921784+n8*0.990034621+x3[i]*-0.966987596+n8*0.998405675)
n15<-sigmoid(n8*-0.847024843+n13*-0.244673164+x0[i]*-0.588255352+x2[i]*0.647021878+x1[i]*0.876332234)
n16<-sigmoid(x4[i]*0.840663869+x0[i]*-0.011851347+n9*-0.184688541+n14*-0.334850961+	n15*0.517705818)
n20<-sigmoid(n15*-0.605733314+n15*-0.998158624+	x3[i]*0.999717273+n11*-0.92657599+n11*-0.98455636)
n21<- sigmoid(n13*0.430962424+n20*-0.998921473+	n9*0.034041672+n13*0.180002296+n16*0.703225416)

13	12	0.660042282
	10	0.995998154
	In3	0.551665019
	In1	-0.677119584
	5	-0.692222669

n14<-sigmoid(x3[i]*-0.998688241+x3[i]*-0.978921784+n8*0.990034621+x3[i]*-0.966987596+n8*0.998405675)
n15<-sigmoid(n8*-0.847024843+n13*-0.244673164+x0[i]*-0.588255352+x2[i]*0.647021878+x1[i]*0.876332234)
n16<-sigmoid(x4[i]*0.840663869+x0[i]*-0.011851347+n9*-0.184688541+n14*-0.334850961+	n15*0.517705818)
n20<-sigmoid(n15*-0.605733314+n15*-0.998158624+	x3[i]*0.999717273+n11*-0.92657599+n11*-0.98455636)
n21<- sigmoid(n13*0.430962424+n20*-0.998921473+	n9*0.034041672+n13*0.180002296+n16*0.703225416)

14	In3	-0.998688241
	In3	-0.978921784
	8	0.990034621
	In3	-0.966987596
	8	0.998405675

n15<-sigmoid(n8*-0.847024843+n13*-0.244673164+x0[i]*-0.588255352+x2[i]*0.647021878+x1[i]*0.876332234)
n16<-sigmoid(x4[i]*0.840663869+x0[i]*-0.011851347+n9*-0.184688541+n14*-0.334850961+	n15*0.517705818)
n20<-sigmoid(n15*-0.605733314+n15*-0.998158624+	x3[i]*0.999717273+n11*-0.92657599+n11*-0.98455636)
n21<- sigmoid(n13*0.430962424+n20*-0.998921473+	n9*0.034041672+n13*0.180002296+n16*0.703225416)


15	8	-0.847024843
	13	-0.244673164
	In0	-0.588255352
	In2	0.647021878
	In1	0.876332234

n16<-sigmoid(x4[i]*0.840663869+x0[i]*-0.011851347+n9*-0.184688541+n14*-0.334850961+	n15*0.517705818)
n20<-sigmoid(n15*-0.605733314+n15*-0.998158624+	x3[i]*0.999717273+n11*-0.92657599+n11*-0.98455636)
n21<- sigmoid(n13*0.430962424+n20*-0.998921473+	n9*0.034041672+n13*0.180002296+n16*0.703225416)

16	In4	0.840663869
	In0	-0.011851347
	9	-0.184688541
	14	-0.334850961
	15	0.517705818

n20<-sigmoid(n15*-0.605733314+n15*-0.998158624+	x3[i]*0.999717273+n11*-0.92657599+n11*-0.98455636)
n21<- sigmoid(n13*0.430962424+n20*-0.998921473+	n9*0.034041672+n13*0.180002296+n16*0.703225416)

20	n15*-0.605733314+
	n15*-0.998158624+
	x3[i]*0.999717273+
	n11*-0.92657599+
	n11*-0.98455636

n21<- sigmoid(n13*0.430962424+n20*-0.998921473+	n9*0.034041672+n13*0.180002296+n16*0.703225416)


21	n13*0.430962424+
	n20*-0.998921473+
	n9*0.034041672+
	n13*0.180002296+
	n16*0.703225416


















5	In4	0.506582348	12	8	-0.652311893
	In2	-0.541103631		8	-0.236627174
	In1	0.959851767		8	-0.525020231
	In4	0.912161709		7	0.056080529
	In3	0.997902529		In0	-0.370064069
6	In4	-0.828627814	13	12	0.660042282
	5	-0.599031165		10	0.995998154
	5	0.896761378		In3	0.551665019
	In2	0.156051832		In1	-0.677119584
	In3	-0.025218621		5	-0.692222669
7	In3	-0.999448609	14	In3	-0.998688241
	In1	0.975382807		In3	-0.978921784
	In0	-0.982697096		8	0.990034621
	In1	0.979656103		In3	-0.966987596
	In0	-0.970994118		8	0.998405675
8	7	-0.539523242	15	8	-0.847024843
	6	0.491734746		13	-0.244673164
	5	0.02705971		In0	-0.588255352
	In4	0.143474725		In2	0.647021878
	In4	-0.601916252		In1	0.876332234
9	In0	-0.75989462	16	In4	0.840663869
	8	0.048235005		In0	-0.011851347
	In4	-0.097955664		9	-0.184688541
	In1	-0.873630507		14	-0.334850961
	5	0.132408839		15	0.517705818
10	In0	-0.994272874	20	15	-0.605733314
	8	0.976679028		15	-0.998158624
	In3	-0.986520556		In3	0.999717273
	In0	-0.985976986		11	-0.92657599
	In0	-0.992489562		11	-0.98455636
11	In3	0.433099563	21	13	0.430962424
	9	0.848981216		20	-0.998921473
	In0	0.348491568		9	0.034041672
	In1	0.53241466		13	0.180002296
	7	-0.371502855		16	0.703225416

count <- 0
for (val in x) {
if(val %% 2 == 0)  count = count+1
}
print(count)


matrix(0, n, m)

T <- seq(from=1,to=200,by=1)
N <- numeric(length(T))
n <- 2
for (t in T) {
  n <- a*n/(1+b*n)
  N[t] <- n
}
